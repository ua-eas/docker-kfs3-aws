#!/bin/bash

KFS_STARTUP_LOG="kfs-startup.log"

# Basic logging command to put timestamps in front of things
log() {
  date +"%b %e, %Y %r $*" >> "$LOGS_DIRECTORY/$KFS_STARTUP_LOG"
}

echo_time() {
  date +"%b%e, %Y %r $*"
}

tomcat_start () {
    #run logrotate on our log files
    logrotate -f /etc/logrotate.conf

    # re-map the tomcat logs directory to our mapped container volume
    rm -f $TOMCAT_BASE_DIR/logs
    ln -s $LOGS_DIRECTORY $TOMCAT_BASE_DIR/logs

    # ensure that the tomcat temp directory exists
    if [ ! -d $TOMCAT_BASE_DIR/temp ]
    then
        mkdir $TOMCAT_BASE_DIR/temp
    fi

    # make logs directory and kfs-startup.log if they do not exists
    if [ ! -f $LOGS_DIRECTORY/kfs-startup.log ]
    then
        mkdir -p $LOGS_DIRECTORY
        log "Creating logs directory."
        echo_time "Creating logs directory."
        touch $LOGS_DIRECTORY/kfs-startup.log
    fi

    chmod -R 777  $LOGS_DIRECTORY
    
    # Make our kfs webapp directory if it doesn't exist
    if [ ! -d $TOMCAT_KFS_DIR ]
    then
        mkdir $TOMCAT_KFS_DIR
    fi

    log "Using KFS_ENV_NAME: $KFS_ENV_NAME."
    echo_time "Using KFS_ENV_NAME: $KFS_ENV_NAME."

    # Figure out what artifact we need for this application environment
    case "$KFS_ENV_NAME" in
        'dev')
               APP_VERSION=$KFS_VERSION_DEV
               APP_REPO=$KFS_REPOSITORY_DEV
               ;;
        'tst')
               APP_VERSION=$KFS_VERSION_TST
               APP_REPO=$KFS_REPOSITORY_TST
               ;;
        'stg')
               APP_VERSION=$KFS_VERSION_STG
               APP_REPO=$KFS_REPOSITORY_STG
               ;;
        'prd')
               APP_VERSION=$KFS_VERSION_PRD
               APP_REPO=$KFS_REPOSITORY_PRD
               ;;
        *)
            log "Invalid KFS_ENV_NAME: $KFS_ENV_NAME."
            echo_time "Invalid KFS_ENV_NAME: $KFS_ENV_NAME."
            exit 1
               ;;
    esac

    # Download the WAR file if it doesn't exist
    WAR_FILE="$TOMCAT_KFS_DIR/kfs.war"
    log "Looking for $WAR_FILE..."
    echo_time "Looking for $WAR_FILE..."
    if [ ! -f $WAR_FILE ]
    then
        MAVEN_SERVER="https://ka-tools.mosaic.arizona.edu/nexus"
        MAVEN_ENDPOINT="$MAVEN_SERVER/service/local/artifact/maven/redirect"
        WAR_SOURCE_URL="$MAVEN_ENDPOINT?r=$APP_REPO&g=org.kuali.kfs&a=kfs-web&v=$APP_VERSION&c=ua-ksd&p=war"
        curl -L "$WAR_SOURCE_URL" -o $WAR_FILE
        WAR_URL_FOR_PRINT=`curl -Is $WAR_SOURCE_URL | awk '/Location/ { print $2 }'`
        log "WAR file downloaded: $WAR_URL_FOR_PRINT"
        echo_time "WAR file downloaded: $WAR_URL_FOR_PRINT"
        # Extract the WAR file
        cd $TOMCAT_KFS_DIR
        jar -xf $WAR_FILE
    fi

    log "Starting Tomcat application server tomcat ..."
    echo_time "Starting Tomcat application server tomcat ..."

    # copy in tomcat configuration files
    log "Copying tomcat configuration files."
    echo_time "Copying tomcat configuration files."
    cp $TOMCAT_CONFIG_DIRECTORY/server.xml $TOMCAT_BASE_DIR/conf/
    cp $SECURITY_DIRECTORY/tomcat-users.xml $TOMCAT_BASE_DIR/conf/
    cp $TOMCAT_CONFIG_DIRECTORY/logging.properties $TOMCAT_BASE_DIR/conf
    cp $TOMCAT_CONFIG_DIRECTORY/log4j.properties $TOMCAT_KFS_WEBINF_DIR/classes

    # copy in New Relic config file
    log "Copying New Relic configuration file."
    echo_time "Copying New Relic configuration file."
    cp $SECURITY_DIRECTORY/newrelic.yml $TOMCAT_SHARE_LIB/

    # copy in oracle JDBC drivers
    log "Copying oracle JDBC drivers."
    echo_time "Copying oracle JDBC drivers."
    cp $TOMCAT_CONFIG_DIRECTORY/classes/* $TOMCAT_SHARE_LIB/

    # Get changelogs for liquibase
    log "Loading changelog files for liquibase."
    echo_time "Loading changelog files for liquibase"

    # create new directory to hold the files extracted from kfs-core-ua jar file
    mkdir -p $TOMCAT_KFS_CORE_DIR

    # create new directory to hold the UA changelog files
    mkdir -p $UA_DB_CHANGELOGS_DIR

    # extract files in kfs-core-ua* jar
    cd $TOMCAT_KFS_CORE_DIR
    /usr/bin/jar -xf $TOMCAT_KFS_DIR/WEB-INF/lib/kfs-core-ua*

    # copy edu changelog files to changelogs directory
    mv $TOMCAT_KFS_CORE_DIR/edu $UA_DB_CHANGELOGS_DIR

	# run liquibase here
    log "Running liquibase update."
    echo_time "Running liquibase update."
	liquibase_update_kfs.sh $APP_VERSION

    log "Completed running liquibase update"
    echo_time "Completed running liquibase update"

    cp $TOMCAT_CONFIG_DIRECTORY/setenv.sh $TOMCAT_SHARE_BIN/
    chmod +x $TOMCAT_SHARE_BIN/setenv.sh
	
	#if rhubarb-config has not been deployed, deploy it
    log "Checking for existing rhubarb-config deployment..."
    echo_time "Checking for existing rhubarb-config deployment..."
    if [ ! -d /etc/opt/kuali/rhubarb ]
    then
        log "No rhubarb-config deployment found, deploying rhubarb"
        echo_time "No rhubarb-config deployment found, deploying rhubarb"
        startdir=$(pwd)
        service ssh start
        mkdir -p /git-clones
        git clone "https://github.com/ua-eas/katt-kfs-rhubarb-config" /git-clones/katt-kfs-rhubarb-config
        cd /git-clones/katt-kfs-rhubarb-config/ && bundle install
        cd /git-clones/katt-kfs-rhubarb-config/ && cap local deploy
        cd $startdir
        rm -R /git-clones
        service ssh stop
    else
        log "rhubarb-config already deployed, no action required"
        echo_time "rhubarb-config already deployed, no action required"
    fi
    #if rhubarb has not been deployed, deploy it
    log "Checking for existing rhubarb deployment..."
    echo_time "Checking for existing rhubarb deployment..."
    if [ ! -d /opt/kuali/rhubarb ]
    then
        log "No rhubarb deployment found, deploying rhubarb"
        echo_time "No rhubarb deployment found, deploying rhubarb"
        startdir=$(pwd)
        service ssh start
        mkdir -p /git-clones
        git clone "https://github.com/ua-eas/katt-kfs-rhubarb" /git-clones/katt-kfs-rhubarb
        cd /git-clones/katt-kfs-rhubarb/ && bundle install
        cd /git-clones/katt-kfs-rhubarb/ && cap local deploy
        cd $startdir
        rm /transactional/work/control/*.runnable
        touch /transactional/work/control/$HOSTNAME.runnable
        rm -R /git-clones
        service ssh stop
    else
        log "rhubarb already deployed, no action required"
        echo_time "rhubarb already deployed, no action required"
    fi

    log "Starting up tomcat"
    echo_time "Starting up tomcat"

    $TOMCAT_SHARE_BIN/catalina.sh start

    # Tail the tomcat log file to keep the container alive
    tail -f /logs/kfs.log /logs/catalina.out

    return;
}

tomcat_stop() {

    log "Stopping Tomcat application server tomcat ..."
    echo_time "Stopping Tomcat application server tomcat ..."

    /usr/share/tomcat7/bin/catalina.sh stop

    sleep 3

    PIDS=`pgrep -f -d' ' `
    log "Unable to stop Tomcat application server tomcat: running PIDS are '$PIDS'."
    echo_time "Unable to stop Tomcat application server tomcat: running PIDS are '$PIDS'."

    return;
}

tomcat_status () {

    PIDS=`pgrep -f -d' ' `
    log "Tomcat application server tomcat is running: PIDS are '$PIDS'."
    echo_time "Tomcat application server tomcat is running: PIDS are '$PIDS'."

    return;
}

log "Calling $0 $1"
echo_time "Calling $0 $1"

case "$1" in
    'start')
           tomcat_start
           ;;
    'stop')
           tomcat_stop
           ;;
    'restart')
           tomcat_stop
           tomcat_start
           ;;
    'status')
           tomcat_status
           ;;
    *)
        log "Invalid input parameter: $1."
        echo_time "Invalid input parameter: $1."
        exit 1
           ;;
esac
